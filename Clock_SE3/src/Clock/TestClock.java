package Clock;

/*
 * Testing environment for checking simple functions of digit class.
 */
import bgi.TouchEvent;
import java.time.LocalTime;
import javax.swing.Timer;
import java.awt.event.*;

/**
 * @author Owen, Sam
 */
public class TestClock extends javax.swing.JFrame {

    /**
     * Creates new form TestClock
     */
    public TestClock() {
        initComponents();
        initTime();
    } 
    
    /**
    * All code to be run on timer interval.
    */
    private void runEverySecond(){
        displayTime();
        incrementTime();
        timer.setDelay(1000/clockSpeed);
    }
    
        
    /**
    * Increment seconds and adjust minute/hour for overflow
    */
    public void incrementTime() {
        //logic for clock
        seconds++;
        
        if(seconds == 60) {
            minutes++;
            seconds = 0;
        
            if(minutes == 60) {
                hour++;
                minutes = 0;
            }
        }
    }
    
   /**
    * Update display with digits from time values
    */
    public void displayTime() {
        
        if(twelveHour) hour %= 12;
        
        // get digits from time
        int d0 = hour > 10 ? hour/10: 0;
        int d1 = hour % 10;
        int d2 = minutes > 10 ? minutes/10: 0;
        int d3 = minutes % 10;  
        
        // flash separator
        char sep = (seconds%2 ==0) ? ':' : ' ';
        
        // shows time on digit display
        digit0.setDigit(d0);
        digit1.setDigit(d1);
        digSeparator.setChar(sep);
        digit2.setDigit(d2);
        digit3.setDigit(d3);
    }
    
    /**
    * Initialise all time variables and start timer.
    */
    private void initTime() {
        currentTime = LocalTime.now();
        hour = currentTime.getHour();
        minutes = currentTime.getMinute();
        seconds = currentTime.getSecond(); 
        
        timer = new Timer(1000/clockSpeed, new ActionListener(){
            //this code will run every second, sped up by a factor of clockSpeed
            @Override
            public void actionPerformed(ActionEvent evt) {runEverySecond();}
        });
        timer.start();
    }

    
    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        digitCell = new javax.swing.JPanel();
        digit0 = new Clock.Digit();
        digit1 = new Clock.Digit();
        digSeparator = new Clock.Digit();
        digit2 = new Clock.Digit();
        digit3 = new Clock.Digit();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        digitCell.setBackground(new java.awt.Color(0, 0, 0));
        digitCell.setMaximumSize(new java.awt.Dimension(770, 32767));
        digitCell.setPreferredSize(new java.awt.Dimension(770, 308));
        digitCell.setSize(new java.awt.Dimension(770, 308));
        digitCell.add(digit0);
        digitCell.add(digit1);
        digitCell.add(digSeparator);
        digitCell.add(digit2);
        digitCell.add(digit3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(digitCell, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(digitCell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestClock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestClock().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Clock.Digit digSeparator;
    private Clock.Digit digit0;
    private Clock.Digit digit1;
    private Clock.Digit digit2;
    private Clock.Digit digit3;
    private javax.swing.JPanel digitCell;
    // End of variables declaration//GEN-END:variables
    
    Timer timer;
    int clockSpeed = 1;
    LocalTime currentTime;
    boolean twelveHour = true;
    int hour, minutes, seconds;

}
